{"version":3,"file":"AddEventToCalendar.js","sourceRoot":"","sources":["../src/AddEventToCalendar.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,MAAM,mBAAmB,CAAC;AAExD,OAAO,sBAAsB,MAAM,0BAA0B,CAAC;AA6C9D,MAAM,CAAN,IAAY,UAaX;AAbD,WAAY,UAAU;IACpB;;OAEG;IACH,kDAAY,CAAA;IACZ;;OAEG;IACH,mDAAY,CAAA;IACZ;;OAEG;IACH,qDAAa,CAAA;AACf,CAAC,EAbW,UAAU,KAAV,UAAU,QAarB;AAED;;;;;GAKG;AACH,MAAM,CAAC,KAAK,UAAU,4BAA4B,CAChD,MAAsB;IAEtB,IAAI,CAAC,sBAAsB,CAAC,uBAAuB,EAAE,CAAC;QACpD,MAAM,IAAI,mBAAmB,CAAC,oBAAoB,EAAE,8BAA8B,CAAC,CAAC;IACtF,CAAC;IACD,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC;QACtB,MAAM,IAAI,KAAK,CAAC,0DAA0D,CAAC,CAAC;IAC9E,CAAC;IACD,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;QACpB,MAAM,IAAI,KAAK,CAAC,yDAAyD,CAAC,CAAC;IAC7E,CAAC;IACD,OAAO,sBAAsB,CAAC,uBAAuB,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC,CAAC;AACrF,CAAC;AAED,SAAS,eAAe,CAAC,IAAS;IAChC,OAAO,IAAI,YAAY,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;AAC1D,CAAC;AAED,SAAS,mBAAmB,CAAC,GAAW;IACtC,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;QAC1C,MAAM,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;QACvB,IAAI,KAAK,IAAI,IAAI,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,CAAC,CAAC,KAAK,YAAY,IAAI,CAAC,EAAE,CAAC;YAC3E,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC;gBACzB,OAAO,EAAE,GAAG,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,GAAG,CAAC,mBAAmB,CAAC,EAAE,CAAC;YAC3D,CAAC;YACD,OAAO,EAAE,GAAG,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,mBAAmB,CAAC,KAAK,CAAC,EAAE,CAAC;QACvD,CAAC;QACD,GAAG,CAAC,GAAG,CAAC,GAAG,eAAe,CAAC,KAAK,CAAC,CAAC;QAClC,OAAO,GAAG,CAAC;IACb,CAAC,EAAE,EAAE,CAAC,CAAC;AACT,CAAC","sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\n\nimport ExpoAddEventToCalendar from './ExpoAddEventToCalendar';\n\nexport type Event = {\n  /**\n   * Visible name of the event.\n   */\n  title: string;\n\n  /**\n   * Date object or string representing the time when the event starts.\n   */\n  startDate: number | Date;\n\n  /**\n   * Date object or string representing the time when the event ends.\n   */\n  endDate: number | Date;\n\n  /**\n   * Location field of the event.\n   */\n  location: string;\n\n  /**\n   * Whether the event is displayed as an all-day event on the calendar\n   */\n  allDay: boolean;\n\n  /**\n   * Description of the event.\n   */\n  description: string;\n};\n\nexport interface AddEventToCalendarResult {\n  /**\n   * Result code returned by the activity.\n   */\n  resultCode: ResultCode;\n  /**\n   * Optional data URI that can be returned by the activity.\n   */\n  data?: string;\n}\n\nexport enum ResultCode {\n  /**\n   * Indicates that the activity operation succeeded.\n   */\n  Success = -1,\n  /**\n   * Means that the activity was canceled, e.g. by tapping on the back button.\n   */\n  Canceled = 0,\n  /**\n   * First custom, user-defined value that can be returned by the activity.\n   */\n  FirstUser = 1,\n}\n\n/**\n * Starts the specified activity. The method will return a promise which resolves when the user\n * returns to the app.\n * @param params An object of intent parameters.\n * @return A promise which fulfils with `AddEventToCalendarResult` object.\n */\nexport async function startAddEventToCalendarAsync(\n  params: Partial<Event>\n): Promise<AddEventToCalendarResult> {\n  if (!ExpoAddEventToCalendar.startAddEventToCalendar) {\n    throw new UnavailabilityError('AddEventToCalendar', 'startAddEventToCalendarAsync');\n  }\n  if (!params.startDate) {\n    throw new Error('startAddEventToCalendarAsync requires a startDate (Date)');\n  }\n  if (!params.endDate) {\n    throw new Error('startAddEventToCalendarAsync requires an endDate (Date)');\n  }\n  return ExpoAddEventToCalendar.startAddEventToCalendar(stringifyDateValues(params));\n}\n\nfunction stringifyIfDate(date: any): any {\n  return date instanceof Date ? date.toISOString() : date;\n}\n\nfunction stringifyDateValues(obj: object): object {\n  return Object.keys(obj).reduce((acc, key) => {\n    const value = obj[key];\n    if (value != null && typeof value === 'object' && !(value instanceof Date)) {\n      if (Array.isArray(value)) {\n        return { ...acc, [key]: value.map(stringifyDateValues) };\n      }\n      return { ...acc, [key]: stringifyDateValues(value) };\n    }\n    acc[key] = stringifyIfDate(value);\n    return acc;\n  }, {});\n}\n"]}